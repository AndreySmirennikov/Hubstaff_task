name: 🎭 Playwright Test Suite

on:
  # Manual trigger with parameters
  workflow_dispatch:
    inputs:
      environment:
        description: 'Test environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
          - dev
      browser:
        description: 'Browser to run tests on'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - chromium
          - webkit
          - firefox
      test_suite:
        description: 'Test suite to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - smoke
          - regression
          - critical
      workers:
        description: 'Number of parallel workers'
        required: false
        default: '4'
        type: string
      
  # Trigger on every push to main and develop branches
  push:
    branches: [main, develop]
    paths-ignore:
      - '**/*.md'
      - '.gitignore'
      - 'docs/**'
      
  # Trigger on Pull Requests
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]
    
  # Nightly runs at 2:00 AM UTC (Moscow time would be 5:00 AM)
  schedule:
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '20'
  PLAYWRIGHT_BROWSERS_PATH: '~/.cache/playwright'

jobs:
  # 🔍 Code Quality Checks (runs on every PR)
  lint-and-format:
    name: 🔍 Code Quality & ESLint
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📁 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔍 Run ESLint
        run: npm run lint

      - name: 💄 Check Prettier formatting
        run: npm run format:check

      - name: 📊 ESLint Report
        if: failure()
        run: |
          echo "❌ ESLint or Prettier checks failed!"
          echo "Please run 'npm run lint:fix' and 'npm run format' to fix issues."
          exit 1

  # 🧪 Playwright Tests
  playwright-tests:
    name: 🧪 Playwright Tests
    runs-on: ubuntu-latest
    # Run after lint on PRs, or immediately on other triggers  
    needs: [lint-and-format]
    if: always() && (needs.lint-and-format.result == 'success' || needs.lint-and-format.result == 'skipped')
    
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, webkit]
        include:
          - browser: chromium
            name: Chrome
          - browser: webkit  
            name: Safari
            
    steps:
      - name: 📁 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: 🔧 Set test parameters
        id: test-params
        run: |
          # Set workers count
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            WORKERS=${{ github.event.inputs.workers }}
          elif [ "${{ github.event_name }}" == "pull_request" ]; then
            WORKERS=2
          else
            WORKERS=4
          fi
          echo "workers=$WORKERS" >> $GITHUB_OUTPUT
          
          # Set test filter based on suite
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ "${{ github.event.inputs.test_suite }}" != "all" ]; then
            if [ "${{ github.event.inputs.test_suite }}" == "smoke" ]; then
              TEST_FILTER="--grep @smoke"
            elif [ "${{ github.event.inputs.test_suite }}" == "critical" ]; then
              TEST_FILTER="--grep @critical"
            elif [ "${{ github.event.inputs.test_suite }}" == "regression" ]; then
              TEST_FILTER="--grep @regression"
            fi
          else
            TEST_FILTER=""
          fi
          echo "test_filter=$TEST_FILTER" >> $GITHUB_OUTPUT

      - name: 🧪 Run Playwright tests
        run: |
          npx playwright test \
            --project=${{ matrix.browser }} \
            --workers=${{ steps.test-params.outputs.workers }} \
            ${{ steps.test-params.outputs.test_filter }} \
            --reporter=html,allure-playwright,json
        env:
          CI: true
          PLAYWRIGHT_HTML_OPEN: never

      - name: 📊 Generate Allure Report
        if: always()
        run: |
          npm run allure:generate
        continue-on-error: true

      - name: 📤 Upload Playwright HTML Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ matrix.browser }}-${{ github.run_number }}
          path: playwright-report/
          retention-days: 30

      - name: 📤 Upload Allure Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.browser }}-${{ github.run_number }}
          path: allure-results/
          retention-days: 30

      - name: 📤 Upload Allure Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report-${{ matrix.browser }}-${{ github.run_number }}
          path: allure-report/
          retention-days: 30

      - name: 📤 Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.browser }}-${{ github.run_number }}
          path: test-results/
          retention-days: 30

      - name: 📤 Upload Screenshots & Videos
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: failure-artifacts-${{ matrix.browser }}-${{ github.run_number }}
          path: |
            test-results/**/*.png
            test-results/**/*.webm
          retention-days: 30

  # 📈 Test Results Summary
  test-summary:
    name: 📈 Test Results Summary
    runs-on: ubuntu-latest
    needs: [playwright-tests]
    if: always()
    
    steps:
      - name: 📁 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: 📊 Create Test Summary
        run: |
          echo "## 🧪 Test Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Browser | Status | Reports |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          
          # Check test results for each browser
          for browser in chromium webkit; do
            if [ -d "artifacts/test-results-${browser}-${{ github.run_number }}" ]; then
              if [ -f "artifacts/test-results-${browser}-${{ github.run_number }}/results.json" ]; then
                echo "| ${browser} | ✅ Available | [HTML Report](../actions/runs/${{ github.run_id }}) [Allure Report](../actions/runs/${{ github.run_id }}) |" >> $GITHUB_STEP_SUMMARY
              else
                echo "| ${browser} | ❌ Failed | [Artifacts](../actions/runs/${{ github.run_id }}) |" >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "| ${browser} | ⏭️ Skipped | - |" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Execution Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Run ID**: ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "- **Environment**: ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Test Suite**: ${{ github.event.inputs.test_suite }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Workers**: ${{ github.event.inputs.workers }}" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 💬 Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Read test results and create comment
            let comment = '## 🧪 Playwright Test Results\n\n';
            comment += '| Browser | Status | Duration |\n';
            comment += '|---------|--------|---------|\n';
            
            const browsers = ['chromium', 'webkit'];
            for (const browser of browsers) {
              const resultsPath = `artifacts/test-results-${browser}-${{ github.run_number }}/results.json`;
              if (fs.existsSync(resultsPath)) {
                try {
                  const results = JSON.parse(fs.readFileSync(resultsPath, 'utf8'));
                  const status = results.status === 'passed' ? '✅ Passed' : '❌ Failed';
                  const duration = Math.round(results.duration / 1000) + 's';
                  comment += `| ${browser} | ${status} | ${duration} |\n`;
                } catch (e) {
                  comment += `| ${browser} | ⚠️ Unknown | - |\n`;
                }
              } else {
                comment += `| ${browser} | ⏭️ Skipped | - |\n`;
              }
            }
            
            comment += '\n📊 **Reports**: Available in the [workflow artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n';
            comment += '\n🔍 **Code Quality**: ESLint checks completed successfully ✅';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # 🚨 Notification Job (only for failures in main/develop or scheduled runs)
  notify-failure:
    name: 🚨 Failure Notification
    runs-on: ubuntu-latest
    needs: [playwright-tests]
    if: failure() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'schedule')
    
    steps:
      - name: 📧 Send notification
        run: |
          echo "🚨 CRITICAL: Playwright tests failed on ${{ github.ref_name }} branch!"
          echo "📋 Run details: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "🔍 Please check the test results and fix any issues immediately."
          
          # Here you can add Slack/Teams/Email notifications
          # Example for Slack webhook:
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"🚨 Playwright tests failed on '"${{ github.ref_name }}"' branch!\nRun: https://github.com/'"${{ github.repository }}"'/actions/runs/'"${{ github.run_id }}"'"}' \
          #   ${{ secrets.SLACK_WEBHOOK_URL }}
